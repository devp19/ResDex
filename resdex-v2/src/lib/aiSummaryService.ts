// AI Summary Service for DailyDigest
// This service handles AI-generated summaries for research articles

export interface AISummary {
  id: string;
  articleId: string;
  summary: string;
  date: string;
  model: string;
  confidence: number;
}

export interface Article {
  id: string; // Stable unique identifier
  title: string;
  summary: string;
  tag: string;
  link: string;
  author: string;
  published: string;
  source: string;
  arxivCategory: string;
  aiSummary?: string;
}

export interface SummaryStats {
  total: number;
  withSummaries: number;
  percentage: number;
}

// Mock function to get AI summaries for a specific date
export const getAISummaries = async (date: string): Promise<AISummary[]> => {
  try {
    // In a real implementation, this would fetch from your AI service or database
    // For now, return mock data
    console.log(`Fetching AI summaries for date: ${date}`);
    
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 100));
    
    // Return empty array for now - implement actual AI summary fetching here
    return [];
  } catch (error) {
    console.error('Error fetching AI summaries:', error);
    return [];
  }
};

// Merge AI summaries with articles
export const mergeAISummariesWithArticles = (
  articles: Article[], 
  summaries: AISummary[]
): Article[] => {
  if (!summaries.length) return articles;
  
  return articles.map(article => {
    // Find matching summary by article link or title
    const matchingSummary = summaries.find(summary => 
      summary.articleId === article.link || 
      summary.articleId === article.title
    );
    
    if (matchingSummary) {
      return {
        ...article,
        aiSummary: matchingSummary.summary
      };
    }
    
    return article;
  });
};

// Calculate summary statistics
export const getSummaryStats = (articles: Article[]): SummaryStats => {
  const total = articles.length;
  const withSummaries = articles.filter(article => article.aiSummary).length;
  const percentage = total > 0 ? Math.round((withSummaries / total) * 100) : 0;
  
  return {
    total,
    withSummaries,
    percentage
  };
};

// Generate AI summary for a single article (placeholder)
export const generateAISummary = async (article: Article): Promise<string> => {
  try {
    // In a real implementation, this would call your AI service
    // For now, return a placeholder
    console.log(`Generating AI summary for: ${article.title}`);
    
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    return `AI-generated summary for "${article.title}" - This is a placeholder summary that would be generated by your AI service.`;
  } catch (error) {
    console.error('Error generating AI summary:', error);
    return '';
  }
};

// Save AI summary to database
export const saveAISummary = async (summary: AISummary): Promise<boolean> => {
  try {
    // In a real implementation, this would save to your database
    console.log('Saving AI summary:', summary);
    
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 500));
    
    return true;
  } catch (error) {
    console.error('Error saving AI summary:', error);
    return false;
  }
}; 